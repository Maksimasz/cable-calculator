import streamlit as st
import csv
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
try:
    from google_sheets_config import load_catalog_from_sheets, save_catalog_to_sheets
    USE_GOOGLE_SHEETS = True
except ImportError:
    USE_GOOGLE_SHEETS = False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –Ω–∞ Hugging Face Spaces
import os
IS_HUGGINGFACE_SPACE = os.getenv("SPACE_ID") is not None

CSV_FILE = "connectors.csv"

# ---------- –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ----------
def load_catalog():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Google Sheets"""
    catalog = {}
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Google Sheets (–æ–±–ª–∞–∫–æ) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ Hugging Face Spaces
    if USE_GOOGLE_SHEETS and not IS_HUGGINGFACE_SPACE:
        try:
            catalog = load_catalog_from_sheets()
            if catalog:  # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
                return catalog
        except:
            pass  # –ï—Å–ª–∏ –æ–±–ª–∞–∫–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: CSV —Ñ–∞–π–ª (–ª–æ–∫–∞–ª—å–Ω–æ)
    if os.path.exists(CSV_FILE):
        with open(CSV_FILE, newline="", encoding="utf-8") as f:
            reader = csv.reader(f)
            for row in reader:
                if len(row) == 2:
                    name, size = row
                    try:
                        catalog[name] = float(size)
                    except ValueError:
                        continue
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä (–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å)
    if not catalog:
        catalog = {
            "SF9351-60004": 3.0,
            "16_MCX-50-2-104": 5.0,
            "16_SMA-50-2-103/111_NE": 3.0,
            "SMA-50-2-103": 2.5,
            "N-50-2-103": 4.0,
            "TNC-50-2-103": 3.5,
            "BNC-50-2-103": 2.8,
            "MCX-50-2-103": 3.2,
            "MMCX-50-2-103": 2.1,
            "U.FL-50-2-103": 1.8,
        }
    
    return catalog

def sync_catalogs():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É Google Sheets –∏ CSV"""
    if not USE_GOOGLE_SHEETS:
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
        sheets_catalog = load_catalog_from_sheets()
        if not sheets_catalog:
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
        csv_catalog = {}
        if os.path.exists(CSV_FILE):
            with open(CSV_FILE, newline="", encoding="utf-8") as f:
                reader = csv.reader(f)
                for row in reader:
                    if len(row) == 2:
                        name, size = row
                        try:
                            csv_catalog[name] = float(size)
                        except ValueError:
                            continue
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º: Google Sheets + —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑ CSV
        merged_catalog = sheets_catalog.copy()
        for name, size in csv_catalog.items():
            if name not in merged_catalog:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
                merged_catalog[name] = size
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –≤ Google Sheets
        from google_sheets_config import save_catalog_to_sheets
        if save_catalog_to_sheets(merged_catalog):
            # –û–±–Ω–æ–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
            with open(CSV_FILE, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                for name, size in merged_catalog.items():
                    writer.writerow([name, size])
            return True
        
        return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def update_catalog_files():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    # –û–±–Ω–æ–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
    try:
        with open(CSV_FILE, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            for name, size in st.session_state.catalog.items():
                writer.writerow([name, size])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CSV: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if USE_GOOGLE_SHEETS:
        try:
            from google_sheets_config import save_catalog_to_sheets
            save_catalog_to_sheets(st.session_state.catalog)
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Google Sheets: {e}")

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ - –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Google Sheets

# ---------- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ----------
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
if "catalog" not in st.session_state or st.session_state.get("force_reload", False):
    st.session_state.catalog = load_catalog()
    st.session_state.force_reload = False

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
if "current_page" not in st.session_state:
    st.session_state.current_page = "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
with st.sidebar:
    st.title("üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    if st.button("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", use_container_width=True):
        st.session_state.current_page = "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
        st.rerun()
    
    if st.button("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞–º–∏", use_container_width=True):
        st.session_state.current_page = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
        st.rerun()
    
    st.divider()
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    st.subheader("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
    if st.button("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True, type="secondary"):
        if sync_catalogs():
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        else:
            st.warning("‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        st.session_state.force_reload = True
        st.rerun()
    
    st.divider()
    
    # –ú–∏–Ω–∏-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
    st.subheader("üìè –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –µ–¥–∏–Ω–∏—Ü")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    conv_type = st.selectbox(
        "–¢–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
        ["–ú–µ—Ç—Ä—ã ‚Üí –ú–∏–ª–ª–∏–º–µ—Ç—Ä—ã", "–ú–µ—Ç—Ä—ã ‚Üí –°–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã", "–°–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã ‚Üí –ú–∏–ª–ª–∏–º–µ—Ç—Ä—ã"],
        key="converter_type"
    )
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    if conv_type == "–ú–µ—Ç—Ä—ã ‚Üí –ú–∏–ª–ª–∏–º–µ—Ç—Ä—ã":
        input_value = st.number_input("–ú–µ—Ç—Ä—ã:", min_value=0.0, step=0.001, format="%.3f", key="meters_to_mm_input")
        result = input_value * 1000
        st.write(f"**{result:.1f} –º–º**")
    elif conv_type == "–ú–µ—Ç—Ä—ã ‚Üí –°–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã":
        input_value = st.number_input("–ú–µ—Ç—Ä—ã:", min_value=0.0, step=0.001, format="%.3f", key="meters_to_cm_input")
        result = input_value * 100
        st.write(f"**{result:.1f} —Å–º**")
    else:  # –°–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã ‚Üí –ú–∏–ª–ª–∏–º–µ—Ç—Ä—ã
        input_value = st.number_input("–°–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã:", min_value=0.0, step=0.1, format="%.1f", key="cm_to_mm_input")
        result = input_value * 10
        st.write(f"**{result:.1f} –º–º**")
    
    st.divider()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.caption(f"–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤: {len(st.session_state.catalog)}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (–∫—ç—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å)
    if "connection_status" not in st.session_state:
        if IS_HUGGINGFACE_SPACE:
            st.session_state.connection_status = "huggingface"
        elif USE_GOOGLE_SHEETS:
            try:
                test_catalog = load_catalog_from_sheets()
                if test_catalog:
                    st.session_state.connection_status = "connected"
                else:
                    st.session_state.connection_status = "unavailable"
            except:
                st.session_state.connection_status = "unavailable"
        else:
            st.session_state.connection_status = "local_only"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    if st.session_state.connection_status == "connected":
        st.success("‚òÅÔ∏è Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω")
    elif st.session_state.connection_status == "unavailable":
        st.warning("‚ö†Ô∏è Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    elif st.session_state.connection_status == "huggingface":
        st.info("ü§ó Hugging Face Spaces")
    else:
        st.info("üíæ –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

# CSS —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∏ –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
st.markdown("""
<style>
/* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
@media (max-width: 768px) {
    /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
    .stSelectbox > div > div {
        background-color: #1a1a1a !important;
        border: 2px solid #444 !important;
        min-height: 44px !important; /* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è */
    }
    
    .stSelectbox > div > div > div > div {
        color: #90EE90 !important;
        font-weight: 500 !important;
        font-size: 16px !important; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑—É–º –Ω–∞ iOS */
    }
    
    /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–æ–∫ */
    .stButton > button {
        min-height: 44px !important;
        font-size: 16px !important;
    }
    
    /* –£–ª—É—á—à–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ */
    .stNumberInput > div > div > input {
        min-height: 44px !important;
        font-size: 16px !important;
    }
    
    /* –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å */
    .css-1d391kg {
        width: 100% !important;
        max-width: 100% !important;
    }
    
    /* –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ */
    .main > div {
        padding-top: 1rem !important;
    }
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ */
.stSelectbox > div > div {
    background-color: #262730 !important;
}

/* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ (–æ–ø—Ü–∏–∏) */
.stSelectbox > div > div > div > div {
    color: #90EE90 !important; /* —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π */
}

/* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º */
.stSelectbox > div > div > div > div[data-baseweb="select"] {
    color: #fafafa !important; /* –æ–±—ã—á–Ω—ã–π –±–µ–ª—ã–π */
}

/* PWA —Å—Ç–∏–ª–∏ */
@media (display-mode: standalone) {
    /* –°—Ç–∏–ª–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ PWA */
    .main > div {
        padding-top: env(safe-area-inset-top, 1rem) !important;
        padding-bottom: env(safe-area-inset-bottom, 1rem) !important;
    }
}

/* –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–æ–≤ */
@media (min-width: 769px) and (max-width: 1024px) {
    .stSelectbox > div > div {
        min-height: 40px !important;
    }
    
    .stButton > button {
        min-height: 40px !important;
    }
}
</style>
""", unsafe_allow_html=True)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if st.session_state.current_page == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    st.title("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª–∏–Ω—ã –∫–∞–±–µ–ª—è")
    st.caption(f"üìä –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(st.session_state.catalog)}")
    
    st.divider()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    conn1 = st.selectbox("1 –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä", list(st.session_state.catalog.keys()), key="conn1")
    conn2 = st.selectbox("2 –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä", list(st.session_state.catalog.keys()), key="conn2")
    cable_len = st.number_input("–î–ª–∏–Ω–∞ –∫–∞–±–µ–ª—è (–º–º)", min_value=0.0, step=1.0)
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∏–ø–∞ —Ç–æ–ª–µ—Ä–∞–Ω—Å–∞
    tol_type = st.radio("–¢–∏–ø —Ç–æ–ª–µ—Ä–∞–Ω—Å–∞", ["–º–º", "%"], horizontal=True, key="tol_type")
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–ª–µ—Ä–∞–Ω—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    if tol_type == "–º–º":
        tol_value = st.number_input("–¢–æ–ª–µ—Ä–∞–Ω—Ü (–º–º)", value=0.0, step=0.1, key="tol_mm")
        tol_mm = tol_value
    else:
        tol_percent = st.number_input("–¢–æ–ª–µ—Ä–∞–Ω—Ü (%)", value=0.0, step=0.1, key="tol_percent")
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º % –≤ –º–º (–æ—Ç –¥–ª–∏–Ω—ã –∫–∞–±–µ–ª—è)
        tol_mm = (tol_percent / 100) * cable_len
    
    size1 = st.session_state.catalog[conn1]
    size2 = st.session_state.catalog[conn2]
    final_len = cable_len - (size1 + size2) + tol_mm
    
    st.write("–†–∞–∑–º–µ—Ä –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ 1:", size1, "–º–º")
    st.write("–†–∞–∑–º–µ—Ä –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ 2:", size2, "–º–º")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–ª–µ—Ä–∞–Ω—Å
    if tol_type == "–º–º":
        st.write("–¢–æ–ª–µ—Ä–∞–Ω—Å:", tol_mm, "–º–º")
    else:
        st.write("–¢–æ–ª–µ—Ä–∞–Ω—Å:", tol_percent, "% (", f"{tol_mm:.2f}", "–º–º)")
    
    st.subheader(f"–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–∞–±–µ–ª—è: {final_len:.2f} –º–º")

elif st.session_state.current_page == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞–º–∏
    st.title("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞–º–∏")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2 = st.columns([1, 1])
    with col1:
        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä", type="primary", use_container_width=True):
            st.session_state.show_add_connector = True
            st.rerun()
    
    with col2:
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", use_container_width=True):
            st.session_state.show_all_connectors = not st.session_state.get("show_all_connectors", False)
            st.rerun()
    
    st.divider()
    
    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
    if st.session_state.get("show_add_connector", False):
        st.subheader("üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä")
        
        with st.form("add_connector_form"):
            new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: SMA-50-2-103")
            new_size = st.number_input("–†–∞–∑–º–µ—Ä (–º–º)", min_value=0.0, step=0.1, format="%.1f")
            
            col1, col2 = st.columns(2)
            with col1:
                submit = st.form_submit_button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å", type="primary", use_container_width=True)
            with col2:
                cancel = st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True)
            
            if submit and new_name and new_size > 0:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                new_name_upper = new_name.upper().strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ Google Sheets –∏ CSV
                duplicate_found = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ Google Sheets
                if USE_GOOGLE_SHEETS:
                    try:
                        from google_sheets_config import load_catalog_from_sheets
                        sheets_catalog = load_catalog_from_sheets()
                        if sheets_catalog and new_name_upper in sheets_catalog:
                            st.error(f"‚ùå –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä '{new_name_upper}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Google Sheets!")
                            duplicate_found = True
                    except:
                        pass
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ CSV —Ñ–∞–π–ª–µ
                if not duplicate_found and os.path.exists(CSV_FILE):
                    with open(CSV_FILE, newline="", encoding="utf-8") as f:
                        reader = csv.reader(f)
                        for row in reader:
                            if len(row) == 2 and row[0] == new_name_upper:
                                st.error(f"‚ùå –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä '{new_name_upper}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ CSV —Ñ–∞–π–ª–µ!")
                                duplicate_found = True
                                break
                
                if not duplicate_found:
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
                    sheets_saved = False
                    if USE_GOOGLE_SHEETS:
                        try:
                            from google_sheets_config import save_catalog_to_sheets
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
                            current_catalog = load_catalog()
                            current_catalog[new_name_upper] = new_size
                            sheets_saved = save_catalog_to_sheets(current_catalog)
                        except Exception as e:
                            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Sheets: {e}")
                    
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –î–æ–±–∞–≤–ª—è–µ–º –≤ CSV —Ñ–∞–π–ª
                    csv_saved = False
                    try:
                        with open(CSV_FILE, 'a', newline='', encoding='utf-8') as f:
                            writer = csv.writer(f)
                            writer.writerow([new_name_upper, new_size])
                        csv_saved = True
                    except Exception as e:
                        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CSV: {e}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
                    st.session_state.catalog[new_name_upper] = new_size
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if sheets_saved and csv_saved:
                        st.success(f"‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä '{new_name_upper}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets –∏ CSV!")
                    elif sheets_saved:
                        st.success(f"‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä '{new_name_upper}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets!")
                    elif csv_saved:
                        st.success(f"‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä '{new_name_upper}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ CSV —Ñ–∞–π–ª!")
                    else:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä!")
                    
                    st.session_state.show_add_connector = False
                    st.session_state.force_reload = True
                    st.rerun()
            elif submit:
                st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            
            if cancel:
                st.session_state.show_add_connector = False
                st.rerun()
    
    # –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    if st.session_state.get("show_all_connectors", False):
        st.subheader("üìã –í—Å–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –≤ –±–∞–∑–µ")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        import pandas as pd
        connectors_data = []
        for name, size in st.session_state.catalog.items():
            connectors_data.append({"–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä": name, "–†–∞–∑–º–µ—Ä (–º–º)": size})
        
        if connectors_data:
            df = pd.DataFrame(connectors_data)
            df = df.sort_values("–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä")  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            
            st.dataframe(df, use_container_width=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–í—Å–µ–≥–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤", len(df))
            with col2:
                st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä", f"{df['–†–∞–∑–º–µ—Ä (–º–º)'].mean():.1f} –º–º")
            with col3:
                st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä", f"{df['–†–∞–∑–º–µ—Ä (–º–º)'].max():.1f} –º–º")
            
            st.divider()
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞–º–∏
            st.subheader("üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤")
            
            # –í—ã–±–æ—Ä –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            selected_connector = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                [""] + list(st.session_state.catalog.keys()),
                key="edit_connector"
            )
            
            if selected_connector:
                current_size = st.session_state.catalog[selected_connector]
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
                    with st.form("edit_connector_form"):
                        new_name = st.text_input("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", value=selected_connector)
                        new_size = st.number_input("–ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (–º–º)", value=current_size, min_value=0.0, step=0.1, format="%.1f")
                        
                        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary"):
                            if new_name.upper().strip() != selected_connector:
                                # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                                new_name_upper = new_name.upper().strip()
                                if new_name_upper in st.session_state.catalog and new_name_upper != selected_connector:
                                    st.error(f"‚ùå –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä '{new_name_upper}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                                else:
                                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
                                    del st.session_state.catalog[selected_connector]
                                    st.session_state.catalog[new_name_upper] = new_size
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
                                    update_catalog_files()
                                    st.success(f"‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name_upper}'!")
                                    st.session_state.force_reload = True
                                    st.rerun()
                            else:
                                # –ò–∑–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä
                                st.session_state.catalog[selected_connector] = new_size
                                update_catalog_files()
                                st.success(f"‚úÖ –†–∞–∑–º–µ—Ä –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ '{selected_connector}' –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                st.session_state.force_reload = True
                                st.rerun()
                
                with col2:
                    st.subheader("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
                    st.warning(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä '{selected_connector}'")
                    
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä", type="secondary"):
                        if selected_connector in st.session_state.catalog:
                            del st.session_state.catalog[selected_connector]
                            update_catalog_files()
                            st.success(f"‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä '{selected_connector}' —É–¥–∞–ª–µ–Ω!")
                            st.session_state.force_reload = True
                            st.rerun()
        else:
            st.info("–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
